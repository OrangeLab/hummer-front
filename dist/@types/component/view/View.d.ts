import { EventListener } from '../event/Event';
import { BasicAnimation } from '../BasicAnimation';
import { KeyframeAnimation } from '../KeyframeAnimation';
export declare const SIZE_STYLE: Array<any>;
export interface ViewStyle {
    top?: string | number;
    left?: string | number;
    bottom?: string | number;
    right?: string | number;
    margin?: string | number;
    marginTop?: string | number;
    marginLeft?: string | number;
    marginBottom?: string | number;
    marginRight?: string | number;
    padding?: string | number;
    paddingTop?: string | number;
    paddingLeft?: string | number;
    paddingBottom?: string | number;
    paddingRight?: string | number;
    width?: string | number;
    height?: string | number;
    minWidth?: string | number;
    minHeight?: string | number;
    maxWidth?: string | number;
    maxHeight?: string | number;
    flexDirection?: 'row' | 'column';
    flexWrap?: 'nowrap' | 'wrap' | 'wrap-reverse';
    justifyContent?: 'flex-start' | 'flex-end' | 'center' | 'space-between' | 'space-around' | 'space-evenly';
    alignItems?: 'flex-start' | 'flex-end' | 'center' | 'baseline' | 'stretch';
    alignContent?: 'flex-start' | 'flex-end' | 'center' | 'space-between' | 'space-around' | 'stretch';
    order?: number;
    flexGrow?: number;
    flexShrink?: number;
    flexBasis?: string;
    alignSelf?: 'flex-start' | 'flex-end' | 'center' | 'baseline' | 'stretch';
    position?: 'relative' | 'absolute' | 'fixed' | 'sticky' | 'static' | 'inherit';
    backgroundColor?: string;
    backgroundImage?: string;
    opacity?: number;
    visibility?: 'hidden' | 'visible';
    display?: 'none' | 'flex' | 'block' | 'inline' | 'inline-block  ';
    borderColor?: string;
    borderLeftColor?: string;
    borderTopColor?: string;
    borderRightColor?: string;
    borderBottomColor?: string;
    borderStyle?: 'solid' | 'dashed' | 'dotted';
    borderLeftStyle?: 'solid' | 'dashed' | 'dotted';
    borderTopStyle?: 'solid' | 'dashed' | 'dotted';
    borderRightStyle?: 'solid' | 'dashed' | 'dotted';
    borderBottomStyle?: 'solid' | 'dashed' | 'dotted';
    borderWidth?: string | number;
    borderLeftWidth?: string | number;
    borderTopWidth?: string | number;
    borderRightWidth?: string | number;
    borderBottomWidth?: string | number;
    borderRadius?: string | number;
    borderTopLeftRadius?: string | number;
    borderTopRightRadius?: string | number;
    borderBottomLeftRadius?: string | number;
    borderBottomRightRadius?: string | number;
    shadow?: string;
    overflow?: 'hidden' | 'visible';
    zIndex?: number;
    transform?: string;
    transitionDelay?: string | number;
    transitionProperty?: string;
    transitionDuration?: string | number;
    transitionTimingFunction?: 'linear' | 'ease-in' | 'ease-out' | 'ease-in-out';
}
export declare type EventType = 'longPress' | 'pan' | 'pinch' | 'swipe' | 'tap' | 'touch' | 'touchDown' | 'input' | 'scroll' | 'switch';
export declare class View {
    viewID?: string;
    node: HTMLElement | HTMLImageElement | HTMLButtonElement | HTMLInputElement | HTMLTextAreaElement | HTMLSpanElement | any;
    hmNode?: any;
    protected _enabled: boolean;
    protected subViews: Set<View>;
    protected _style: ViewStyle;
    protected listeners: {
        [key: string]: Array<EventListener>;
    };
    protected eventListeners: {
        [key: string]: {
            hammer?: any;
            listener?: Function;
            [key: string]: any;
        };
    };
    protected animations: {
        [key: string]: Animation;
    };
    layout: () => void;
    constructor(viewID?: string);
    protected defaultStyle(): void;
    protected createNode(): void;
    get enabled(): boolean;
    set enabled(_enabled: boolean);
    get style(): ViewStyle;
    set style(_style: ViewStyle);
    initialize(): void;
    finalize(): void;
    appendChild(subview: any): void;
    removeChild(subview: any): void;
    removeAll(): void;
    insertBefore(subview: any, existingView: View): void;
    replaceChild(newSubview: View, oldSubview: View): void;
    getElementById(viewID: string): View;
    addEventListener(key: EventType, listener: EventListener): void;
    removeEventListener(key: EventType, listener: EventListener): void;
    addAnimation(animation: BasicAnimation | KeyframeAnimation, key: string): void;
    removeAllAnimation(): void;
    removeAnimationForKey(key: string): void;
    getRect(callback: Function): void;
    resetStyle(): void;
    requestViewWidth(callback: Function): void;
    requestViewHeight(callback: Function): void;
    private getBasicAnimationDefaultKeyframeAnimationOptions;
    private getBasicAnimationKeyFrameAnimationOptions;
    private getKeyframeAnimationOptions;
    private convertPath;
    private convertPathValue;
}
